{"version":3,"sources":["logo.svg","components/board/Board.jsx","components/container/Container.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Board","React","Component","constructor","props","super","socket","io","connect","isDrawing","this","on","data","root","interval","setInterval","clearInterval","image","Image","ctx","document","querySelector","getContext","onload","drawImage","src","componentDidMount","drawOnCanvas","componentWillReceiveProps","newProps","strokeStyle","color","lineWidth","size","canvas","sketch","sketch_style","getComputedStyle","width","parseInt","getPropertyValue","height","mouse","x","y","last_mouse","addEventListener","e","pageX","offsetLeft","pageY","offsetTop","lineJoin","lineCap","onPaint","removeEventListener","beginPath","moveTo","lineTo","closePath","stroke","undefined","timeout","clearTimeout","setTimeout","base64ImageData","toDataURL","emit","render","createElement","class","id","className","Container","state","changeColor","params","setState","target","value","changeSize","type","onChange","bind","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f170c96.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport io from 'socket.io-client';\r\n\r\nimport './style.css';\r\n\r\nclass Board extends React.Component {\r\n\r\n    timeout;\r\n    socket = io.connect(\"https://mernback-1lla.onrender.com\");//(\"http://localhost:5000\");\r\n\r\n    ctx;\r\n    isDrawing = false;\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.socket.on(\"canvas-data\", function(data){\r\n\r\n            var root = this;\r\n            var interval = setInterval(function(){\r\n                if(root.isDrawing) return;\r\n                root.isDrawing = true;\r\n                clearInterval(interval);\r\n                var image = new Image();\r\n                var canvas = document.querySelector('#board');\r\n                var ctx = canvas.getContext('2d');\r\n                image.onload = function() {\r\n                    ctx.drawImage(image, 0, 0);\r\n\r\n                    root.isDrawing = false;\r\n                };\r\n                image.src = data;\r\n            }, 200)\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.drawOnCanvas();\r\n    }\r\n\r\n    componentWillReceiveProps(newProps) {\r\n        this.ctx.strokeStyle = newProps.color;\r\n        this.ctx.lineWidth = newProps.size;\r\n    }\r\n\r\n    drawOnCanvas() {\r\n        var canvas = document.querySelector('#board');\r\n        this.ctx = canvas.getContext('2d');\r\n        var ctx = this.ctx;\r\n\r\n        var sketch = document.querySelector('#sketch');\r\n        var sketch_style = getComputedStyle(sketch);\r\n        canvas.width = parseInt(sketch_style.getPropertyValue('width'));\r\n        canvas.height = parseInt(sketch_style.getPropertyValue('height'));\r\n\r\n        var mouse = {x: 0, y: 0};\r\n        var last_mouse = {x: 0, y: 0};\r\n\r\n        /* Mouse Capturing Work */\r\n        canvas.addEventListener('mousemove', function(e) {\r\n            last_mouse.x = mouse.x;\r\n            last_mouse.y = mouse.y;\r\n\r\n            mouse.x = e.pageX - this.offsetLeft;\r\n            mouse.y = e.pageY - this.offsetTop;\r\n        }, false);\r\n\r\n\r\n        /* Drawing on Paint App */\r\n        ctx.lineWidth = this.props.size;\r\n        ctx.lineJoin = 'round';\r\n        ctx.lineCap = 'round';\r\n        ctx.strokeStyle = this.props.color;\r\n\r\n        canvas.addEventListener('mousedown', function(e) {\r\n            canvas.addEventListener('mousemove', onPaint, false);\r\n        }, false);\r\n\r\n        canvas.addEventListener('mouseup', function() {\r\n            canvas.removeEventListener('mousemove', onPaint, false);\r\n        }, false);\r\n\r\n        var root = this;\r\n        var onPaint = function() {\r\n            ctx.beginPath();\r\n            ctx.moveTo(last_mouse.x, last_mouse.y);\r\n            ctx.lineTo(mouse.x, mouse.y);\r\n            ctx.closePath();\r\n            ctx.stroke();\r\n\r\n            if(root.timeout != undefined) clearTimeout(root.timeout);\r\n            root.timeout = setTimeout(function(){\r\n                var base64ImageData = canvas.toDataURL(\"image/png\");\r\n                root.socket.emit(\"canvas-data\", base64ImageData);\r\n            }, 1000)\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div class=\"sketch\" id=\"sketch\">\r\n                <canvas className=\"board\" id=\"board\"></canvas>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Board","import React from 'react';\r\nimport Board from '../board/Board';\r\n\r\nimport './style.css';\r\n\r\nclass Container extends React.Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            color: \"#000000\",\r\n            size: \"5\"\r\n        }\r\n    }\r\n\r\n    changeColor(params) {\r\n        this.setState({\r\n            color: params.target.value\r\n        })\r\n    }\r\n\r\n    changeSize(params) {\r\n        this.setState({\r\n            size: params.target.value\r\n        })\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"container\">\r\n                <div class=\"tools-section\">\r\n                    <div className=\"color-picker-container\">\r\n                        Select Brush Color : &nbsp; \r\n                        <input type=\"color\" value={this.state.color} onChange={this.changeColor.bind(this)}/>\r\n                    </div>\r\n\r\n                    <div className=\"brushsize-container\">\r\n                        Select Brush Size : &nbsp; \r\n                        <select value={this.state.size} onChange={this.changeSize.bind(this)}>\r\n                            <option> 5 </option>\r\n                            <option> 10 </option>\r\n                            <option> 15 </option>\r\n                            <option> 20 </option>\r\n                            <option> 25 </option>\r\n                            <option> 30 </option>\r\n                        </select>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div class=\"board-container\">\r\n                    <Board color={this.state.color} size={this.state.size}></Board>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Container from './components/container/Container';\r\n\r\nfunction App() {\r\n  return (\r\n    <Container/>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}